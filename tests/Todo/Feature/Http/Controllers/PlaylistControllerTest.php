<?php

namespace Tests\Todo\Feature\Http\Controllers;

use App\Models\Playlist;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\PlaylistController
 */
class PlaylistControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('playlists.create'));

        $response->assertOk();
        $response->assertViewIs('playlist.create');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $playlist = Playlist::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->delete(route('playlists.destroy', ['id' => $playlist->id]));

        $response->assertRedirect(withSuccess('Playlist Deleted!'));
        $this->assertDeleted($playlists);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $playlist = Playlist::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('playlists.edit', ['id' => $playlist->id]));

        $response->assertOk();
        $response->assertViewIs('playlist.edit');
        $response->assertViewHas('playlist');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('playlists.index'));

        $response->assertOk();
        $response->assertViewIs('playlist.index');
        $response->assertViewHas('playlists');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $playlist = Playlist::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('playlists.show', ['id' => $playlist->id]));

        $response->assertOk();
        $response->assertViewIs('playlist.show');
        $response->assertViewHas('playlist');
        $response->assertViewHas('meta');
        $response->assertViewHas('torrents');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = User::factory()->create();

        $response = $this->actingAs($user)->post(route('playlists.store'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(withErrors($v->errors()));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $playlist = Playlist::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->patch(route('playlists.update', ['id' => $playlist->id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(withErrors($v->errors()));

        // TODO: perform additional assertions
    }

    // test cases...
}
