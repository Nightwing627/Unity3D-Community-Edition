<?php

namespace Tests\Todo\Feature\Http\Controllers;

use App\Models\User;
use App\Models\Warning;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\WarningController
 */
class WarningControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function deactivate_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $warning = Warning::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('deactivateWarning', ['id' => $warning->id]));

        $response->assertRedirect(withSuccess('Warning Was Successfully Deactivated'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function deactivate_all_warnings_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $warning = Warning::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('massDeactivateWarnings', ['username' => $warning->username]));

        $response->assertRedirect(withSuccess('All Warnings Were Successfully Deactivated'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function delete_all_warnings_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $warning = Warning::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->delete(route('massDeleteWarnings', ['username' => $warning->username]));

        $response->assertRedirect(withSuccess('All Warnings Were Successfully Deleted'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function delete_warning_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $warning = Warning::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->delete(route('deleteWarning', ['id' => $warning->id]));

        $response->assertRedirect(withSuccess('Warning Was Successfully Deleted'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function restore_warning_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $warning = Warning::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('restoreWarning', ['id' => $warning->id]));

        $response->assertRedirect(withSuccess('Warning Was Successfully Restored'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $warning = Warning::factory()->create();
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get(route('warnings.show', ['username' => $warning->username]));

        $response->assertOk();
        $response->assertViewIs('user.warninglog');
        $response->assertViewHas('warnings');
        $response->assertViewHas('warningcount');
        $response->assertViewHas('softDeletedWarnings');
        $response->assertViewHas('softDeletedWarningCount');
        $response->assertViewHas('user');

        // TODO: perform additional assertions
    }

    // test cases...
}
